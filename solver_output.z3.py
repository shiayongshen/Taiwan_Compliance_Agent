from z3 import *

# === Variable Declarations ===
AssetLiabilityAllocationRisk_Property = Real('AssetLiabilityAllocationRisk_Property')
AssetRisk_Life = Real('AssetRisk_Life')
AssetRisk_Property = Real('AssetRisk_Property')
CAR = Real('CAR')
CompensationReductionRequired = Real('CompensationReductionRequired')
CompensationRestrictionImplemented = Real('CompensationRestrictionImplemented')
CompensationRestrictionRequired = Real('CompensationRestrictionRequired')
CreditRisk_Property = Real('CreditRisk_Property')
ImprovementPlanExecuted = Real('ImprovementPlanExecuted')
ImprovementPlanSubmitted = Real('ImprovementPlanSubmitted')
InsuranceRisk_Life = Real('InsuranceRisk_Life')
InterestRateRisk_Life = Real('InterestRateRisk_Life')
InvestmentRestrictionImplemented = Real('InvestmentRestrictionImplemented')
InvestmentRestrictionRequired = Real('InvestmentRestrictionRequired')
InvestmentTypeInsuranceAssets = Real('InvestmentTypeInsuranceAssets')
NWR = Real('NWR')
NWR_prev = Real('NWR_prev')
NetWorth = Real('NetWorth')
OtherRisk_Life = Real('OtherRisk_Life')
OtherRisk_Property = Real('OtherRisk_Property')
OwnCapital = Real('OwnCapital')
ProductRestrictionImplemented = Real('ProductRestrictionImplemented')
ProductRestrictionRequired = Real('ProductRestrictionRequired')
ResponsiblePersonAvgCompensationPrior12Months = Real('ResponsiblePersonAvgCompensationPrior12Months')
ResponsiblePersonCompensation = Real('ResponsiblePersonCompensation')
RiskCapital = Real('RiskCapital')
RiskCapital_Life = Real('RiskCapital_Life')
RiskCapital_Property = Real('RiskCapital_Property')
SeverelyInadequateMeasuresImplemented = Real('SeverelyInadequateMeasuresImplemented')
SignificantlyInadequateMeasuresImplemented = Real('SignificantlyInadequateMeasuresImplemented')
Tier1NonRestrictedCapital = Real('Tier1NonRestrictedCapital')
Tier1RestrictedCapital = Real('Tier1RestrictedCapital')
Tier2Capital = Real('Tier2Capital')
TotalAssets = Real('TotalAssets')
UnderwritingRisk_Property = Real('UnderwritingRisk_Property')
insurance_capital_adequacy_ratio_min = Real('insurance_capital_adequacy_ratio_min')
insurance_capital_adequate = Real('insurance_capital_adequate')
insurance_capital_adequate_min_ratio = Real('insurance_capital_adequate_min_ratio')
insurance_capital_classification = Real('insurance_capital_classification')
insurance_capital_inadequate = Real('insurance_capital_inadequate')
insurance_capital_severely_inadequate = Real('insurance_capital_severely_inadequate')
insurance_capital_significantly_inadequate = Real('insurance_capital_significantly_inadequate')
insurance_improvement_plan_execution = Real('insurance_improvement_plan_execution')
insurance_improvement_plan_required = Real('insurance_improvement_plan_required')
insurance_inadequate_compensation_restriction = Real('insurance_inadequate_compensation_restriction')
insurance_inadequate_investment_restriction = Real('insurance_inadequate_investment_restriction')
insurance_inadequate_product_restriction = Real('insurance_inadequate_product_restriction')
insurance_net_worth_min_ratio = Real('insurance_net_worth_min_ratio')
insurance_net_worth_ratio_min = Real('insurance_net_worth_ratio_min')
insurance_severely_inadequate_measures = Real('insurance_severely_inadequate_measures')
insurance_significantly_inadequate_compensation_reduction = Real('insurance_significantly_inadequate_compensation_reduction')
insurance_significantly_inadequate_measures = Real('insurance_significantly_inadequate_measures')
penalty = Bool('penalty')

# === Solver ===
s = Optimize()

# === Soft Constraints (facts) ===
s.add_soft(AssetLiabilityAllocationRisk_Property == 0.0)
s.add_soft(AssetRisk_Life == 0.0)
s.add_soft(AssetRisk_Property == 0.0)
s.add_soft(CAR == 111.09)
s.add_soft(CreditRisk_Property == 0.0)
s.add_soft(InsuranceRisk_Life == 0.0)
s.add_soft(InterestRateRisk_Life == 0.0)
s.add_soft(InvestmentTypeInsuranceAssets == 0.0)
s.add_soft(NWR == 2.97)
s.add_soft(NWR_prev == 2.97)
s.add_soft(NetWorth == 0.0)
s.add_soft(OtherRisk_Life == 0.0)
s.add_soft(OtherRisk_Property == 0.0)
s.add_soft(OwnCapital == 0.0)
s.add_soft(ResponsiblePersonAvgCompensationPrior12Months == 0.0)
s.add_soft(ResponsiblePersonCompensation == 0.0)
s.add_soft(RiskCapital == 0.0)
s.add_soft(RiskCapital_Life == 0.0)
s.add_soft(RiskCapital_Property == 0.0)
s.add_soft(Tier1NonRestrictedCapital == 0.0)
s.add_soft(Tier1RestrictedCapital == 0.0)
s.add_soft(Tier2Capital == 0.0)
s.add_soft(TotalAssets == 0.0)
s.add_soft(UnderwritingRisk_Property == 0.0)
s.add_soft(penalty == False)

# === Hard Constraints ===
s.assert_and_track((CAR >= insurance_capital_adequate_min_ratio), "insurance:capital_adequacy_ratio_min")
s.assert_and_track((NWR >= insurance_net_worth_min_ratio), "insurance:net_worth_ratio_min")
s.assert_and_track(200.0, "insurance:capital_adequate_min_ratio")
s.assert_and_track(3.0, "insurance:net_worth_min_ratio")
s.assert_and_track(And((CAR >= 200.0), Or((NWR >= 3.0), (NWR_prev >= 3.0))), "insurance:capital_adequate")
s.assert_and_track(Or(And((CAR >= 150.0), (CAR < 200.0)), And((NWR < 3.0), (NWR_prev < 3.0), Or((NWR >= 2.0), (NWR_prev >= 2.0)))), "insurance:capital_inadequate")
s.assert_and_track(Or(And((CAR >= 50.0), (CAR < 150.0)), And((NWR < 2.0), (NWR_prev < 2.0), (NWR >= 0.0), (NWR_prev >= 0.0))), "insurance:capital_significantly_inadequate")
s.assert_and_track(Or((CAR < 50.0), (NetWorth < 0.0)), "insurance:capital_severely_inadequate")
s.assert_and_track(insurance_capital_classification == If(insurance_capital_severely_inadequate, 'severely_inadequate', If(insurance_capital_significantly_inadequate, 'significantly_inadequate', If(insurance_capital_inadequate, 'inadequate', If(insurance_capital_adequate, 'adequate', 'unknown')))), "insurance:capital_classification")
s.assert_and_track(insurance_capital_classification, "insurance:capital_classification_priority")
s.assert_and_track(((OwnCapital / RiskCapital) * 100.0), "insurance:car_calculation")
s.assert_and_track(((NetWorth / (TotalAssets - InvestmentTypeInsuranceAssets)) * 100.0), "insurance:nwr_calculation")
s.assert_and_track(Or(Not((insurance_capital_classification == inadequate)), ImprovementPlanSubmitted), "insurance:improvement_plan_required")
s.assert_and_track(Or(Not((insurance_capital_classification == inadequate)), Not(ImprovementPlanSubmitted), ImprovementPlanExecuted), "insurance:improvement_plan_execution")
s.assert_and_track(Or(Not((insurance_capital_classification == significantly_inadequate)), SignificantlyInadequateMeasuresImplemented), "insurance:significantly_inadequate_measures")
s.assert_and_track(Or(Not((insurance_capital_classification == severely_inadequate)), SeverelyInadequateMeasuresImplemented), "insurance:severely_inadequate_measures")
s.assert_and_track((OwnCapital == (Tier1NonRestrictedCapital + Tier1RestrictedCapital + Tier2Capital)), "insurance:own_capital_composition")
s.assert_and_track((RiskCapital_Life == (AssetRisk_Life + InsuranceRisk_Life + InterestRateRisk_Life + OtherRisk_Life)), "insurance:risk_capital_life_insurance")
s.assert_and_track((RiskCapital_Property == (AssetRisk_Property + CreditRisk_Property + UnderwritingRisk_Property + AssetLiabilityAllocationRisk_Property + OtherRisk_Property)), "insurance:risk_capital_property_insurance")
s.assert_and_track(Or(Not((insurance_capital_classification == inadequate)), Not(ProductRestrictionRequired), ProductRestrictionImplemented), "insurance:inadequate_product_restriction")
s.assert_and_track(Or(Not((insurance_capital_classification == inadequate)), Not(InvestmentRestrictionRequired), InvestmentRestrictionImplemented), "insurance:inadequate_investment_restriction")
s.assert_and_track(Or(Not((insurance_capital_classification == inadequate)), Not(CompensationRestrictionRequired), CompensationRestrictionImplemented), "insurance:inadequate_compensation_restriction")
s.assert_and_track(Or(Not((insurance_capital_classification == significantly_inadequate)), Not(CompensationReductionRequired), (ResponsiblePersonCompensation <= (ResponsiblePersonAvgCompensationPrior12Months * 0.7))), "insurance:significantly_inadequate_compensation_reduction")
s.assert_and_track((penalty == False), "meta:penalty_default_false")
s.assert_and_track((penalty == Not(Or(Not(insurance_capital_adequacy_ratio_min), Not(insurance_net_worth_ratio_min), Not(insurance_improvement_plan_required), Not(insurance_improvement_plan_execution), Not(insurance_significantly_inadequate_measures), Not(insurance_severely_inadequate_measures), Not(insurance_inadequate_product_restriction), Not(insurance_inadequate_investment_restriction), Not(insurance_inadequate_compensation_restriction), Not(insurance_significantly_inadequate_compensation_reduction)))), "meta:no_penalty_if_all_pass")

# === Solve ===
result = s.check()
print('Result:', result)
if result == sat:
    m = s.model()
    for d in m.decls():
        print(f"{d.name()} =", m[d])
else:
    print('UNSAT')
    print('Unsat core:', s.unsat_core())